from sly import Lexer, Parser


class PgLexer(Lexer):
    tokens = {ID, NUMBER, PLUS, MINUS, TIMES, ASSIGN, DIVIDE, LEFT, RIGHT,}
    ignore = ' \t '
    literals = {'-'}

    ID = r'[a-zA-Z_][a-zA-Z0-9_]*'
    ERROR = r'00[0-9]*'
    PLUS = r'\+'
    MINUS = r'-'
    TIMES = r'\*'
    DIVIDE = r'/'
    ASSIGN = r'='
    LEFT = r'\('
    RIGHT = r'\)'

    @_(r'\d+')
    def NUMBER(self, t):
        t.value = int(t.value)
        return t

    @_(r'\n+')
    def ignore_newline(self, t):
        self.lineno += t.value.count(' \n ')

    def ERROR(self, t):
        print("ERROR '%s'" % t.value)
        self.index += 1


class PgParser(Parser):
    tokens = PgLexer.tokens

    def __init__(self):
        self.id = { }

    @_('ID ASSIGN expr')
    def statement(self, p):
        self.id[p.ID] = p.expr
        print(p.ID, '=', p.expr)

    @_('expr')
    def statement(self, p):
        print(p.expr)

    @_('expr PLUS term', 'expr MINUS term')
    def expr(self, p):
        return p.expr, p[1], p.term

    @_('term')
    def expr(self, p):
        print(p.term)
        return p.term

    @_('term TIMES factor', 'term DIVIDE factor')
    def expr(self, p):
        return p.expr, p[1], p.term

    @_('factor')
    def term(self, p):
        return p.factor

    @_('NUMBER')
    def factor(self, p):
        return p.NUMBER

    @_('LEFT expr RIGHT')
    def factor(self, p):
        return p.expr

    @_('ID')
    def expr(self, p):
        try:
            return self.id[p.ID]
        except LookupError:
            print("Undefined name '%s'" % p.ID)
            return 0


if __name__ == '__main__':
    lexer = PgLexer
    parser = PgParser
    while True:
        try:
            text = input()
        except EOFError:
            break
        if text:
            parser().parse(lexer().tokenize(text))