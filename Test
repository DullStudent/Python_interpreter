from sly import Lexer, Parser


class PgLexer(Lexer):
    tokens = { ID, NUMBER, PLUS, MINUS, TIMES, ASSIGN, DIVIDE, LEFT, RIGHT }
    ignore = ' \t'

    ID = r'[a-zA-Z_][a-zA-Z0-9_]*'
    ERROR = [r'00[0-9]*', r'-\d+' ]
    PLUS = r'\+'
    MINUS = r'-'
    TIMES = r'\*'
    DIVIDE = r'/'
    ASSIGN = r'='
    LEFT = r'\('
    RIGHT = r'\)'

    @_(r'\d+')
    def NUMBER(self, t):
        t.value = int(t.value)
        return t

    @_(r'\n+')
    def newline(self, t):
        self.lineno += t.value.count('\n')

    def ERROR(self, t):
        print("ERROR '%s'" % t.value[0])
        self.index += 1


class PgParser(Parser):
    tokens = PgLexer.tokens

    precedence = (
        ('left', 'PLUS', 'MINUS'),
        ('left', 'TIMES', 'DIVIDE'),
        ('right', 'UMINUS'),
    )

    def __init__(self):
        self.ids = { }
        print(self.ids, 'id')

    @_('ID ASSIGN expr')
    def statement(self, p):
        self.ids[p.ID] = p.expr
        print(p.ID, '=', p.expr, 'assign')

    @_('expr')
    def statement(self, p):
        print(p.expr, 'expr')

    @_('expr PLUS term')
    def expr(self, p):
        print(p.expr + p.term, 'PLUS')
        return p.expr + p.term

    @_('expr MINUS term')
    def expr(self, p):
        print(p.expr - p.term, 'MINUS')
        return p.expr - p.term

    @_('term')
    def expr(self, p):
        print(p.term, 'term')
        return p.term

    @_('term TIMES factor')
    def expr(self, p):
        print(p.term * p.factor, 'TIMES')
        return p.term * p.factor

    @_('term DIVIDE factor')
    def expr(self, p):
        print(p.term / p.factor, 'DIVIDE')
        return p.term / p.factor

    @_('factor')
    def term(self, p):
        print(p.factor, 'factor')
        return p.factor

    @_('MINUS expr %prec UMINUS')
    def expr(self, p):
        return -p.expr

    @_('LEFT expr RIGHT')
    def factor(self, p):
        return p.expr

    @_('NUMBER')
    def factor(self, p):
        return p.NUMBER

    @_('ID')
    def expr(self, p):
        try:
            return self.ids[p.ID]
        except LookupError:
            print("Undefined name '%s'" % p.ID)
            return 0


if __name__ == '__main__':
    lexer = PgLexer()
    parser = PgParser()
    while True:
        try:
            text = input()
        except EOFError:
            break
        if text:
            parser.parse(lexer.tokenize(text))